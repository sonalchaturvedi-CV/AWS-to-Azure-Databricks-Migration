import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# Script generated for node Data Catalog table
DataCatalogtable_node1 = glueContext.create_dynamic_frame.from_catalog(
    database="db-name",
    table_name="table-name",
    transformation_ctx="DataCatalogtable_node1"
)

# Script generated for node ApplyMapping
ApplyMapping_node2 = ApplyMapping.apply(
    frame=DataCatalogtable_node1,
    mappings=[
        ("vendorid", "long", "vendorid", "long"),
        ("tpep_pickup_datetime", "timestamp", "tpep_pickup_datetime", "timestamp"),
        ("tpep_dropoff_datetime", "timestamp", "tpep_dropoff_datetime", "timestamp"),
        ("passenger_count", "double", "passenger_count", "double"),
        ("trip_distance", "double", "trip_distance", "double"),
        ("ratecodeid", "double", "ratecodeid", "double"),
        ("store_and_fwd_flag", "string", "store_and_fwd_flag", "string"),
        ("pulocationid", "long", "pulocationid", "long"),
        ("dolocationid", "long", "dolocationid", "long"),
        ("payment_type", "long", "payment_type", "long"),
        ("fare_amount", "double", "fare_amount", "double"),
        ("extra", "double", "extra", "double"),
        ("mta_tax", "double", "mta_tax", "double"),
        ("tip_amount", "double", "tip_amount", "double"),
        ("tolls_amount", "double", "tolls_amount", "double"),
        ("improvement_surcharge", "double", "improvement_surcharge", "double"),
        ("total_amount", "double", "total_amount", "double"),
        ("congestion_surcharge", "double", "congestion_surcharge", "double"),
        ("airport_fee", "double", "airport_fee", "double"),
        ("year", "int", "year", "int"),
        ("month", "int", "month", "int")
    ],
    transformation_ctx="ApplyMapping_node2",
)

# Script generated for node DataBricksGlueConnector2
DataBricksGlueConnector2_node3 = glueContext.write_dynamic_frame.from_options(
    frame=ApplyMapping_node2,
    connection_type="custom.jdbc",
    connection_options={
        "url": "your-jdbc-url;PWD='your-pricate-access-token'",
        "user": "your-username-on-Databricks",
        "password": "your-pricate-access-token",
        "dbtable": "`hive_metastore`.`your-db`.`your-table`",
        "redshiftTmpDir": "s3://path/to/directory",
        "className": "com.databricks.client.jdbc.Driver"
    },
    transformation_ctx="DataBricksGlueConnector2_node3",
)

job.commit()
